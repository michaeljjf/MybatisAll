<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
1、接口的名字和Mapper映射文件名称必须保持一致（不包含扩展名），如 EmpMapper.java、EmpMapper.xml，都是EmpMapper
2、Mapper映射文件的namespace必须是接口的全路径名，如 namespace="com.jiangjf.mapper.EmpMapper"
3、sql语句的id必须是对应方法的名称，如 id="findAll"
4、EmpMapper.xml映射文件，保证编译后和接口放在同一个目录下
-->
<mapper namespace="com.jiangjf.mapper.EmpMapper">
    <!-- List<Emp> findAll(); -->
    <select id="findAll" resultType="emp">
        select * from emp
    </select>
    <!--Emp findByEmpno(int empno);-->
    <select id="findByEmpno" resultType="emp">
        select * from emp where empno = #{empno}
    </select>
    <!--
    List<Emp> findByDeptnoAndSal(int deptno, double sal);
    取参数的方式：
    1、arg* arg0 arg1 ... （数字是索引，从0开始）
    select * from emp where deptno = #{arg0} and sal >= #{arg1}
    2、param* param1 param2 ...（数字是编号，从1开始）
    select * from emp where deptno = #{param1} and sal >= #{param2}
    3、别名（使用别名后，arg*方式就不好使了，可以继续使用param*）
    List<Emp> findByDeptnoAndSal(@Param("deptNO") int deptno,@Param("sals") double sal);
    select * from emp where deptno = #{deptNO} and sal >= #{sals}
    -->
    <select id="findByDeptnoAndSal" resultType="emp">
        select * from emp where deptno = #{deptno} and sal >= #{sal}
    </select>

    <select id="findByDeptnoAndSal2" resultType="emp" parameterType="map">
        select * from emp where deptno = #{deptno} and sal >= #{sal}
    </select>

    <select id="findByDeptnoAndSal3" resultType="emp">
        select * from emp where deptno = #{arg0.deptno} and sal >= #{arg1.sal}
        <!-- select * from emp where deptno = #{param1.deptno} and sal >= #{param2.sal} -->
    </select>

    <select id="findByDeptnoAndSal4" resultType="emp">
        select * from emp where deptno = #{empa.deptno} and sal >= #{empb.sal}
    </select>
    <!--
    like 查询写法
    List<Emp> findByEname(String ename);
    -->
    <select id="findByEname" resultType="emp">
        select * from emp where ename like concat('%', #{ename}, '%')
    </select>

    <!--
    动态拼接查询条件
    List<Emp> findByCondition(Emp emp);
    -->
    <select id="findByCondition" resultType="emp">
        select * from emp
        <where>
            <if test="empno != null">
                and empno = #{empno}
            </if>
            <!--
            concat 实现 like
            <if test="ename != null and ename != ''">
                and ename like concat('%', #{ename}, '%')
            </if>
            -->
            <!--
            bind 方式实现 like
            -->
            <if test="ename != null and ename != ''">
                <bind name="likeEname" value="'%'+ename+'%'"/>
                and ename like #{likeEname}
            </if>
            <if test="hiredate != null">
                and hiredate = #{hiredate}
            </if>
            <!--choose when 类似 switch case-->
<!--            <choose>
                <when test="">

                </when>
            </choose>-->
        </where>
    </select>

    <!--
    动态串Set语句
    int updateEmpByCondition(Emp emp);
    -->
    <update id="updateEmpByCondition">
        update emp
        <set>
            <if test="ename != null">
                , ename = #{ename}
            </if>
            <if test="job !=null and job !=''">
                , job = #{job}
            </if>
            <if test="mgr != null">
                , mgr = #{mgr}
            </if>
            <if test="hiredate != null">
                , hiredate = #{hiredate}
            </if>
            <if test="sal != null">
                , sal = #{sal}
            </if>
            <if test="comm != null">
                , comm = #{comm}
            </if>
            <if test="deptno != null">
                , deptno = #{deptno}
            </if>
        </set>
        where empno = #{empno}
    </update>

    <!--
    动态串Set语句
    int updateEmpByCondition2(Emp emp);
    -->
    <update id="updateEmpByCondition2">
        update emp
        <!--
        prefix 要动态添加的前缀
        prefixOverrides 要干掉的前缀
        suffix 要补充的后缀
        suffixOverrides 要干掉的后缀
        -->
        <trim prefix="Set" prefixOverrides="," suffix="" suffixOverrides="">
            <if test="ename != null">
                , ename = #{ename}
            </if>
            <if test="job !=null and job !=''">
                , job = #{job}
            </if>
            <if test="mgr != null">
                , mgr = #{mgr}
            </if>
            <if test="hiredate != null">
                , hiredate = #{hiredate}
            </if>
            <if test="sal != null">
                , sal = #{sal}
            </if>
            <if test="comm != null">
                , comm = #{comm}
            </if>
            <if test="deptno != null">
                , deptno = #{deptno}
            </if>
        </trim>
        where empno = #{empno}
    </update>
</mapper>